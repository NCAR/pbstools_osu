#!/usr/bin/perl -w
#
# pbsdcp -- Distributed copy command for the PBS environment
# Copyright 2006 Ohio Supercomputer Center
#
# License:  GNU GPL v2; see ../COPYING for details.
# Revision info:
# $HeadURL$
# $Revision$
# $Date$
#
# Usage:  pbsdcp [-g|-s] [options] srcfile [...srcfiles...] target
#
# Options:
#  -g   gather mode
#  -s   scatter mode (default)
#
#  -h   print a help message
#  -p   preserve modification times and permissions
#  -r   recursive copy
if ( ! $ENV{"PBS_ENVIRONMENT"} || 
     ( $ENV{"PBS_ENVIRONMENT"} ne "PBS_BATCH" && 
       $ENV{"PBS_ENVIRONMENT"} ne "PBS_INTERACTIVE" ) || 
     $ARGV[0] eq "-h" || $#ARGV < 1 )
{
    if ( ! $ENV{"PBS_ENVIRONMENT"} ||
	 ( $ENV{"PBS_ENVIRONMENT"} ne "PBS_BATCH" &&
	   $ENV{"PBS_ENVIRONMENT"} ne "PBS_INTERACTIVE" ) )
    {
	warn "$0:  Not running withing a PBS job, exiting.\n\n";
    }
    print <<EOH
$0 -- Distributed copy command for the PBS environment

Usage:  pbsdcp [-g|-s|-h] [options] srcfile [...srcfiles...] target

Options:
  -g   gather mode
  -s   scatter mode (default)
  -h   print this help message

  -p   preserve modification times and permissions
  -r   recursive copy
EOH
}
else
{
    # Site-specific settings
    # shared file systems don't require any cleverness to deal with
    $sharedfs = "^/(fs|gpfs|lustre|pvfs|home|[a-z])/";
    # $dsh is only used in gather mode
    $dsh = "/usr/bin/pdsh";
    # set $mpiexec and/or $scatter "" to disable pbsdcp-scatter
    $mpiexec = "/usr/local/hydra/3.2/bin/mpiexec";
    $scatter = "/usr/local/bin/pbsdcp-scatter";
    # $rcp is a fallback in case pbsdcp-scatter is disabled
    $rcp = "/usr/bin/rcp";

    # Rewrite the target name if it's a relative path
    $target=pop(@ARGV);
    if ( $target =~ m:^[^/]: )
    {
        $pwd = `pwd`;
        chop($pwd);
        $newtarget = $pwd . "/" . $target;
        $target = $newtarget;
    }

    # Handle -g and -s
    $gather=0;
    if ( $ARGV[0] eq "-g" )
    {
        shift(@ARGV);
        $gather=1;
    }
    elsif ( $ARGV[0] eq "-s" )
    {
        shift(@ARGV);
        $gather=0;
    }

    # Do the heavy lifting
    if ( $gather==1 )
      {
	$pwd=`pwd`;
	chomp($pwd);
	# keep the exec'ed local shell from trying to expand wildcards
	foreach $arg ( @ARGV )
	  {
	    $arg =~ s/([\[\]\{\}\(\)\*\?\ ])/\\$1/g;
	    push(@NEWARGV,$arg);
	  }
	exec("$dsh cd $pwd \\; cp @NEWARGV $target\n");
      }
    else # scatter -- default
      {
	# if the target is a known shared file system, just use cp
	if ( $target =~ $sharedfs )
	  {
	    exec("cp @ARGV $target");
	  }
	else
	  {
	    # use pbsdcp-scatter if available
	    if ( length($mpiexec)>0 && length($scatter)>0 )
	      {
		exec("$mpiexec -ppn 1 $scatter @ARGV $target");
	      }
	    # if pbsdcp-scatter is not available but there's a node file, use rcp
	    elsif ( defined($ENV{'PBS_NODEFILE'}) && -s $ENV{'PBS_NODEFILE'} )
	      {
		open(NODES,"uniq ".$ENV{'PBS_NODEFILE'}." |");
		@node=<NODES>;
		chop(@node);
		if ( $#node>0 )
		  {
		    for ( $i=0 ; $i<=$#node; $i++ )
		      {
			if ( ($pid[$i]=fork)==0 )
			  {
			    exec("$rcp @ARGV $node[$i]:$target\n");
			  }
		      }
		    for ( $i=0 ; $i<=$#node; $i++ )
		      {
			waitpid($pid[$i],0);
		      }
		  }
		else
		  {
		    exec("cp @ARGV $target");
		  }
	      }
	    else
	      {
		exec("cp @ARGV $target");
	      }
	  }
      }
}
